name: Rust

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            archive: zip
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: zip

    steps:
      # Checkout repository
      - uses: actions/checkout@v3
      
      # Get version from tag
      - name: Get release version from tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Build
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}
      
      # Create archive
      - name: Build archive
        shell: bash
        run: |
          binary_name="target/release/"
          
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi
      
      # Upload release
      - name: Upload the binaries
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
